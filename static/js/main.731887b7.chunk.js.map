{"version":3,"sources":["words.txt","Components/Board/Letter/Letter.js","Components/Board/Board.js","Components/Guess/Guess.js","Components/AllWords/AllWords.js","Components/Util/Trie.js","Components/Util/Solver.js","App.js","reportWebVitals.js","index.js"],"names":["Letter","props","className","selected","onMouseDown","e","preventDefault","handleMouseDown","row","id","onMouseEnter","isMouseDown","handleMouseEnter","value","Board","x","y","letter","layout","dice","map","rowID","index","toString","guess","string","AllWords","show","words","word","found","has","onClick","handleClick","prefixTrie","children","endWord","addWord","addWordHelper","node","str","length","slice","this","isValidPrefix","stringSoFar","checkPrefix","undefined","toUpperCase","checkWord","wordChecker","solver","allWords","paths","currentBoard","solveBoard","board","forEach","findWords","location","path","used","Set","usedCopy","pathCopy","add","push","trie","includes","adjacent","getAdjacentTiles","filter","loc","locationString","tile","newString","dir","coord","checkUsed","i","matches","j","getWords","getPaths","clear","App","rollDice","diceRolls","state","diceResults","diceLeft","die","Math","floor","random","ind","splice","setState","scoreWord","startGame","gameStart","clearSelected","Array","fill","handleStart","a","guessedWords","score","showWords","prevState","wordStart","lastTile","isAdjacent","usedTiles","showPath","newSelected","console","log","setTimeout","handleSolve","handleMouseUp","bind","fetch","wordFile","then","response","text","split","some","points","guesses","newScore","onMouseUp","Guess","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.731887b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/words.5f516bd2.txt\";","import React from 'react';\r\nimport './LetterStyle.css';\r\n\r\nconst Letter = (props) => {\r\n    return (\r\n        <div className={props.selected ? \"letter selected\" : \"letter\"}\r\n             onMouseDown={(e) => {\r\n                 e.preventDefault();\r\n                 props.handleMouseDown(props.row, props.id, true);\r\n             }}\r\n             onMouseEnter={(e) => {\r\n                 if(props.isMouseDown){\r\n                     e.preventDefault();\r\n                     props.handleMouseEnter(props.row, props.id, props.value);\r\n                 }\r\n             }}\r\n        >\r\n            <p>{props.value}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Letter;","import React from 'react';\r\nimport Letter from './Letter/Letter';\r\nimport './BoardStyle.css';\r\n\r\nconst Board = (props) => {\r\n\r\n    function handleMouseEnter(x, y, letter) {\r\n        props.handleMouseEnter(x, y, letter);\r\n    }\r\n\r\n    function handleMouseDown(x, y, isMouseDown) {\r\n        props.handleMouseDown(x, y, isMouseDown);\r\n    }\r\n\r\n    const layout = props.dice.map((row, rowID) => (\r\n        <div className={\"letter-row\"} key={rowID.toString()}>\r\n            {row.map((letter, index) => (\r\n                <Letter\r\n                value={letter}\r\n                key={rowID.toString() + index.toString()}\r\n                row={rowID}\r\n                id={index}\r\n                handleMouseDown={handleMouseDown}\r\n                handleMouseEnter={handleMouseEnter}\r\n                isMouseDown={props.isMouseDown}\r\n                selected={props.selected[rowID][index]}\r\n                />\r\n            ))}\r\n        </div>\r\n    ));\r\n    return (<div className={\"board\"}>{layout}</div>);\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './GuessStyle.css';\r\n\r\nconst guess = (props) => {\r\n    return (\r\n        <div className={\"guess-div\"}>\r\n            <h2 className={\"guess\"}>{props.string}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default guess;","import React from 'react';\r\nimport './AllWordsStyle.css';\r\n\r\nconst AllWords = (props) => {\r\n\r\n    function handleClick(index) {\r\n        props.handleClick(index);\r\n    }\r\n\r\n    return (\r\n      <div className={props.show ? \"words-div\" : \"words-div hidden\"}>\r\n          {props.words.map((word, index) => (\r\n              <button className={props.found.has(word) ? \"word correct\" : \"word\"}\r\n                      onClick={() => handleClick(index)}\r\n                   key={`${index}${word}`}>\r\n              <p>{word}</p>\r\n              </button>\r\n          ))}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default AllWords;","const prefixTrie = {\r\n    children: {},\r\n    value: null,\r\n    endWord: 0,\r\n\r\n    addWord (word) {\r\n\r\n        const addWordHelper = (node, str) => {\r\n            if(!node.children[str[0]]) {\r\n                node.children[str[0]] = {children: {}, value: str[0]};\r\n            }\r\n            if (str.length === 1) {\r\n                node.endWord = 1;\r\n            }\r\n            if (str.length > 1) {\r\n                addWordHelper(node.children[str[0]], str.slice(1));\r\n            }\r\n        }\r\n        addWordHelper(this, word);\r\n    },\r\n\r\n    isValidPrefix(stringSoFar) {\r\n        const checkPrefix = (node, string) => {\r\n            // console.log(node);\r\n            if(!node.children[string[0]]) {\r\n                // console.log(`no node for ${string[0]}`);\r\n                return false;\r\n            }\r\n            if (string.length === 1) {\r\n                return node.children[string[0]] !== undefined;\r\n            }\r\n            if (string.length > 1) {\r\n                // console.log(\"checking next letter\");\r\n                return checkPrefix(node.children[string[0]], string.slice(1));\r\n            }\r\n        }\r\n        return checkPrefix(this, stringSoFar.toUpperCase());\r\n    },\r\n\r\n    checkWord(word) {\r\n        const wordChecker = (node, string) => {\r\n            if(string.length > 1 && node.children[string[0]]) {\r\n                return wordChecker(node.children[string[0]], string.slice(1));\r\n            } else if (string.length === 1) {\r\n                if (!node.children[string[0]]) {\r\n                    return false;\r\n                } else {\r\n                    if(node.children[string[0]]){\r\n                        return node.children[string[0]].endWord === 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return wordChecker(this, word.toUpperCase());\r\n    }\r\n};\r\n\r\nexport default prefixTrie;","import trie from './Trie';\r\n\r\nconst solver = {\r\n    allWords: [],\r\n    paths: [],\r\n    currentBoard: [],\r\n\r\n    solveBoard (board) {\r\n        this.currentBoard = board;\r\n        board.forEach((row, x) => {\r\n            row.forEach((letter, y) => {\r\n                this.findWords(letter, [x, y]);\r\n            });\r\n        });\r\n    },\r\n\r\n    findWords(string, location, path = [], used = new Set()) {\r\n        const usedCopy = new Set(used);\r\n        const pathCopy = path.slice();\r\n        usedCopy.add(`${location[0]}${location[1]}`);\r\n        pathCopy.push(location);\r\n        if(string.length >= 3) {\r\n            if(trie.checkWord(string) && !this.allWords.includes(string)) {\r\n                this.allWords.push(string);\r\n                this.paths.push(pathCopy);\r\n            }\r\n        }\r\n        const adjacent = this.getAdjacentTiles(location).filter(loc => {\r\n            const locationString = `${loc[0]}${loc[1]}`;\r\n            return !usedCopy.has(locationString);\r\n        });\r\n\r\n        adjacent.forEach(tile => {\r\n            const newString = string + this.currentBoard[tile[0]][tile[1]]\r\n            if(trie.isValidPrefix(newString)) {\r\n                this.findWords(newString, tile, pathCopy, usedCopy);\r\n            }\r\n        });\r\n    },\r\n\r\n    getAdjacentTiles (location) {\r\n        const directions = [\r\n            [-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]\r\n        ];\r\n        return directions.map(dir => {\r\n            const x = dir[0] + location[0];\r\n            const y = dir[1] + location[1];\r\n            return [x, y];\r\n        }).filter(coord => {\r\n            return coord[0] >= 0 && coord[0] < 4 && coord[1] >= 0 && coord[1] < 4;\r\n        });\r\n    },\r\n\r\n    checkUsed (adjacent, used) {\r\n        for (let i = 0; i < used.length; i++) {\r\n            let matches = 0;\r\n            for (let j = 0; j < adjacent.length; j++) {\r\n                if(adjacent[j] === used[i][j]) {\r\n                    matches++;\r\n                }\r\n            }\r\n            if(matches > 1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    getWords() {\r\n        return this.allWords;\r\n    },\r\n\r\n    getPaths() {\r\n        return this.paths;\r\n    },\r\n\r\n    clear() {\r\n        this.paths = [];\r\n        this.allWords = [];\r\n    }\r\n}\r\n\r\nexport default solver;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport wordFile from './words.txt';\n\nimport Board from './Components/Board/Board';\nimport Guess from './Components/Guess/Guess';\nimport AllWords from './Components/AllWords/AllWords';\nimport Timer from './Components/Timer/Timer';\nimport trie from './Components/Util/Trie';\nimport solver from './Components/Util/Solver';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            diceResults: [\n                Array(4).fill(\"\"),\n                Array(4).fill(\"\"),\n                Array(4).fill(\"\"),\n                Array(4).fill(\"\"),\n            ],\n            selected: [\n                Array(4).fill(false),\n                Array(4).fill(false),\n                Array(4).fill(false),\n                Array(4).fill(false),\n            ],\n            paths: [],\n            word: '',\n            wordStart: false,\n            guessedWords: new Set(),\n            allWords: [],\n            lastTile: [],\n            usedTiles: new Set(),\n            score: 0,\n            showWords: false,\n            gameStart: false\n        };\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.showPath = this.showPath.bind(this);\n    }\n\n  componentDidMount() {\n      fetch(wordFile)\n          .then(response => {\n              return response.text()\n          })\n          .then(text => {\n              text.split('\\n').forEach(word => {\n                  trie.addWord(word);\n              });\n          });\n  }\n\n  dice = [\n      ['A', 'E', 'A', 'N', 'E', 'G'],\n      ['A', 'H', 'S', 'P', 'C', 'O'],\n      ['A', 'S', 'P', 'F', 'F', 'K'],\n      ['O', 'B', 'J', 'O', 'A', 'B'],\n      ['I', 'O', 'T', 'M', 'U', 'C'],\n      ['R', 'Y', 'V', 'D', 'E', 'L'],\n      ['L', 'R', 'E', 'I', 'X', 'D'],\n      ['E', 'I', 'U', 'N', 'E', 'S'],\n      ['W', 'N', 'G', 'E', 'E', 'H'],\n      ['L', 'N', 'H', 'N', 'R', 'Z'],\n      ['T', 'S', 'T', 'I', 'Y', 'D'],\n      ['O', 'W', 'T', 'O', 'A', 'T'],\n      ['E', 'R', 'T', 'T', 'Y', 'L'],\n      ['T', 'O', 'E', 'S', 'S', 'I'],\n      ['T', 'E', 'R', 'W', 'H', 'V'],\n      ['N', 'U', 'I', 'H', 'M', 'QU']\n  ];\n\n  rollDice = () => {\n    const diceRolls = this.state.diceResults.slice();\n    let diceLeft = this.dice.slice();\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            let die = Math.floor(Math.random() * diceLeft.length);\n            const ind = Math.floor(Math.random() * 6);\n            diceRolls[i][j] = diceLeft[die][ind];\n            diceLeft.splice(die, 1);\n        }\n    }\n    this.setState({diceResults: diceRolls});\n  }\n\n  isAdjacent(x, y) {\n      const adjacent = solver.getAdjacentTiles(this.state.lastTile);\n      return adjacent.some(loc => loc[0] === x && loc[1] === y);\n  }\n\n  scoreWord = (word) => {\n      switch (word.length) {\n          case 3:\n          case 4:\n              return 1;\n          case 5:\n              return 2;\n          case 6:\n              return 3;\n          case 7:\n              return 5;\n          default:\n              return 11;\n      }\n  }\n\n  startGame = () => {\n      this.setState(() => {\n          return {gameStart: false};\n      });\n  }\n\n  clearSelected = () => {\n      const selected = [\n          Array(4).fill(false),\n          Array(4).fill(false),\n          Array(4).fill(false),\n          Array(4).fill(false),\n      ];\n      this.setState(() => {\n          return {selected: selected};\n      });\n  }\n\n  handleStart = async () => {\n      await this.clearSelected();\n      solver.clear();\n      this.rollDice();\n      await solver.solveBoard(this.state.diceResults);\n      const words = solver.getWords();\n      const paths = solver.getPaths();\n      this.setState({allWords: words, guessedWords: new Set(), paths: paths, score: 0, showWords: false, gameStart: true});\n  }\n\n  handleMouseDown = (x, y, isMouseDown) => {\n      if(!this.state.selected[x][y]) {\n          this.setState((prevState) => {\n              const selected = prevState.selected;\n              selected[x][y] = true;\n              return {wordStart: isMouseDown, lastTile: [x, y], selected: selected, word: prevState.diceResults[x][y]}\n          });\n      }\n  }\n\n\n  handleMouseUp() {\n      if(this.state.wordStart){\n          const selected = [\n              Array(4).fill(false),\n              Array(4).fill(false),\n              Array(4).fill(false),\n              Array(4).fill(false),\n          ];\n          const usedTiles = new Set();\n          if (this.state.word.length >= 3 && !this.state.guessedWords.has(this.state.word)){\n              if (trie.checkWord(this.state.word)) {\n                  const points = this.scoreWord(this.state.word);\n                  const guesses = new Set(this.state.guessedWords);\n                  guesses.add(this.state.word);\n                  this.setState((prevState) => {\n                      const newScore = prevState.score + points;\n                      return {word: '', lastTile: [], guessedWords: guesses, selected: selected, wordStart: false, usedTiles: usedTiles, score: newScore};\n                  });\n              } else {\n                  this.setState({word: '', lastTile: [], selected: selected, wordStart: false, usedTiles: usedTiles});\n              }\n          } else {\n              this.setState({word: '', lastTile: [], selected: selected, wordStart: false, usedTiles: usedTiles});\n          }\n      }\n  }\n\n  handleMouseEnter = (x, y, letter) => {\n      if (this.state.wordStart){\n          if(this.isAdjacent(x, y)){\n              if (!this.state.selected[x][y] && !this.state.usedTiles.has(`${x.toString()}${y.toString()}`)) {\n                  this.setState((prevState) => {\n                      const selected = prevState.selected;\n                      const usedTiles = new Set(prevState.usedTiles);\n                      usedTiles.add(`${x.toString}${y.toString()}`);\n                      selected[x][y] = true;\n                      return {\n                          word: prevState.word + letter,\n                          usedTiles: usedTiles,\n                          lastTile: [x, y],\n                          selected: selected\n                      };\n                  });\n              }\n          }\n      }\n  }\n\n  showPath = async (index) => {\n      await this.clearSelected();\n      const newSelected = this.state.selected.slice();\n      const paths = this.state.paths[index];\n      console.log(index);\n      console.log(paths);\n      paths.forEach((tile, index) => {\n          setTimeout(() => {\n              newSelected[tile[0]][tile[1]] = true;\n              this.setState({selected: newSelected})\n          }, (index + 1) * 300);\n      });\n\n  }\n\n  handleSolve = () => {\n      this.setState({showWords: true});\n  }\n\n  render () {\n    return (\n        <div className={\"app\"}\n             onMouseUp={this.handleMouseUp}>\n            <div className={\"game-area\"}>\n                <Guess string={this.state.word}/>\n                <Board\n                    dice={this.state.diceResults}\n                    selected={this.state.selected}\n                    handleMouseDown={this.handleMouseDown}\n                    handleMouseEnter={this.handleMouseEnter}\n                    isMouseDown={this.state.wordStart}\n                />\n                <div className={\"button-div\"}>\n                    <button\n                        className={\"game-button\"}\n                        onClick={() => this.handleStart()}>START</button>\n                    <button\n                        className={\"game-button\"}\n                        onClick={() => this.handleSolve()}>SOLVE</button>\n                </div>\n                <div className={\"stats-panel\"}>\n                    <h2>Score: <span className={\"user-score\"}>{this.state.score}</span></h2>\n                    {/*<Timer*/}\n                    {/*    gameStart={this.state.gameStart}*/}\n                    {/*    startGame={this.startGame}*/}\n                    {/*/>*/}\n                </div>\n                <hr/>\n            </div>\n\n            <div className={\"word-area\"}>\n                <AllWords words={this.state.allWords}\n                          found={this.state.guessedWords}\n                          show={this.state.showWords}\n                          handleClick={this.showPath}\n                />\n            </div>\n        </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}