{"version":3,"sources":["english.txt","Components/Board/Letter/Letter.js","Components/Board/Board.js","Components/Guess/Guess.js","Components/AllWords/AllWords.js","Components/Timer/Timer.js","Components/Util/Trie.js","Components/Util/Solver.js","App.js","reportWebVitals.js","index.js"],"names":["Letter","props","className","selected","onMouseDown","e","preventDefault","handlePointerDown","row","id","onMouseEnter","isMouseDown","handlePointerEnter","value","Board","x","y","letter","layout","dice","map","rowID","index","toString","guess","string","AllWords","show","words","word","found","has","onClick","handleClick","Timer","React","useState","time","timeLeft","useEffect","timerId","setInterval","clearInterval","showResults","prefixTrie","children","endWord","addWord","addWordHelper","node","str","length","slice","this","isValidPrefix","stringSoFar","checkPrefix","undefined","checkWord","wordChecker","solver","allWords","paths","currentBoard","solveBoard","board","forEach","findWords","location","path","used","Set","usedCopy","pathCopy","add","push","trie","includes","adjacent","getAdjacentTiles","filter","loc","locationString","tile","newString","dir","coord","checkUsed","i","matches","j","getWords","getPaths","clear","App","rollDice","diceRolls","state","diceResults","diceLeft","die","Math","floor","random","ind","splice","setState","scoreWord","endGame","gameHasStarted","clearSelected","Array","fill","handleStart","a","guessedWords","score","showWords","prevState","wordStart","lastTile","isAdjacent","usedTiles","showPath","newSelected","setTimeout","handlePointerUp","bind","fetch","wordFile","then","response","text","split","toUpperCase","some","points","guesses","newScore","controlArea","onMouseUp","Guess","size","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d554612.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/english.157c66bd.txt\";","import React from 'react';\r\nimport './LetterStyle.css';\r\n\r\nconst Letter = (props) => {\r\n    return (\r\n        <div className={props.selected ? \"letter selected\" : \"letter\"}\r\n             onMouseDown={(e) => {\r\n                 e.preventDefault();\r\n                 props.handlePointerDown(props.row, props.id, true);\r\n             }}\r\n             onMouseEnter={(e) => {\r\n                 if(props.isMouseDown){\r\n                     e.preventDefault();\r\n                     props.handlePointerEnter(props.row, props.id, props.value);\r\n                 }\r\n             }}\r\n        >\r\n            <p>{props.value}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Letter;","import React from 'react';\r\nimport Letter from './Letter/Letter';\r\nimport './BoardStyle.css';\r\n\r\nconst Board = (props) => {\r\n\r\n    function handlePointerEnter(x, y, letter) {\r\n        props.handlePointerEnter(x, y, letter);\r\n    }\r\n\r\n    function handlePointerDown(x, y, isMouseDown) {\r\n        props.handlePointerDown(x, y, isMouseDown);\r\n    }\r\n\r\n    const layout = props.dice.map((row, rowID) => (\r\n        <div className={\"letter-row\"} key={rowID.toString()}>\r\n            {row.map((letter, index) => (\r\n                <Letter\r\n                value={letter}\r\n                key={rowID.toString() + index.toString()}\r\n                row={rowID}\r\n                id={index}\r\n                handlePointerDown={handlePointerDown}\r\n                handlePointerEnter={handlePointerEnter}\r\n                isMouseDown={props.isMouseDown}\r\n                selected={props.selected[rowID][index]}\r\n                />\r\n            ))}\r\n        </div>\r\n    ));\r\n    return (<div className={\"board\"}>{layout}</div>);\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './GuessStyle.css';\r\n\r\nconst guess = (props) => {\r\n    return (\r\n        <div className={\"guess-div\"}>\r\n            <h2 className={\"guess\"}>{props.string}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default guess;","import React from 'react';\r\nimport './AllWordsStyle.css';\r\n\r\nconst AllWords = (props) => {\r\n\r\n    function handleClick(index) {\r\n        props.handleClick(index);\r\n    }\r\n\r\n    return (\r\n      <div className={props.show ? \"words-div\" : \"words-div hidden\"}>\r\n          {props.words.map((word, index) => (\r\n              <button className={props.found.has(word) ? \"word correct\" : \"word\"}\r\n                      onClick={() => handleClick(index)}\r\n                   key={`${index}${word}`}>\r\n              <p>{word}</p>\r\n              </button>\r\n          ))}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default AllWords;","import React from 'react';\r\n\r\nconst Timer = (props) => {\r\n    const [time, timeLeft] = React.useState(90);\r\n\r\n    React.useEffect(() => {\r\n        const timerId = setInterval(() => {\r\n            timeLeft(time - 1);\r\n        }, 1000);\r\n\r\n        return function cleanup() {\r\n            clearInterval(timerId);\r\n        }\r\n    }, [time]);\r\n\r\n    if (time === 0) {\r\n        props.showResults();\r\n    }\r\n\r\n    return (\r\n        <h2>Time: {time}</h2>\r\n    )\r\n}\r\n\r\nexport default Timer;","const prefixTrie = {\r\n    children: {},\r\n    value: null,\r\n    endWord: 0,\r\n\r\n    addWord (word) {\r\n\r\n        /*\r\n        Starting with the base \"value: null\" node, the method creates a node for the first letter if it doesn't exist.\r\n        Then it moves to that node using a substring starting with character position 1. When the string is at length 1,\r\n        the node is the next to last letter, and so it assigns endWord to the child represented by that last letter.\r\n\r\n        Example: \"dog\"\r\n        Node: {}, child[0]: d, string: dog endWord = 0;\r\n        Node: {d}, child[0]: o, string: og endWord = 0;\r\n        Node: {o}, child[0]: g, string: g, endWord = 1;\r\n         */\r\n        const addWordHelper = (node, str) => {\r\n            if(!node.children[str[0]]) {\r\n                node.children[str[0]] = {children: {}, value: str[0], endWord: 0};\r\n            }\r\n            if (str.length > 1) {\r\n                addWordHelper(node.children[str[0]], str.slice(1));\r\n            } else if (str.length === 1) {\r\n                node.children[str[0]].endWord = 1;\r\n            }\r\n        }\r\n        addWordHelper(this, word);\r\n    },\r\n\r\n    /*\r\n    Examines partial strings, letter by letter, and as long as a node exists for the final letter of the partial\r\n    string, this method will return true.\r\n     */\r\n    isValidPrefix(stringSoFar) {\r\n        const checkPrefix = (node, string) => {\r\n            if(!node.children[string[0]]) {\r\n                return false;\r\n            }\r\n            else if (string.length > 1) {\r\n                return checkPrefix(node.children[string[0]], string.slice(1));\r\n            } else if (string.length === 1) {\r\n                return node.children[string[0]] !== undefined;\r\n            }\r\n        }\r\n        return checkPrefix(this, stringSoFar);\r\n    },\r\n\r\n    checkWord(word) {\r\n        const wordChecker = (node, string) => {\r\n            if(!node.children[string[0]]) {\r\n                return false;\r\n            } else if (string.length > 1) {\r\n                return wordChecker(node.children[string[0]], string.slice(1));\r\n            } else if (string.length === 1) {\r\n                return node.children[string[0]].endWord === 1;\r\n            }\r\n        }\r\n        return wordChecker(this, word);\r\n    }\r\n};\r\n\r\nexport default prefixTrie;","import trie from './Trie';\r\n\r\nconst solver = {\r\n    allWords: [],\r\n    paths: [],\r\n    currentBoard: [],\r\n\r\n    solveBoard (board) {\r\n        this.currentBoard = board;\r\n        board.forEach((row, x) => {\r\n            row.forEach((letter, y) => {\r\n                this.findWords(letter, [x, y]);\r\n            });\r\n        });\r\n    },\r\n\r\n    findWords(string, location, path = [], used = new Set()) {\r\n        const usedCopy = new Set(used);\r\n        const pathCopy = path.slice();\r\n        usedCopy.add(`${location[0]}${location[1]}`);\r\n        pathCopy.push(location);\r\n        if(string.length >= 3) {\r\n            if(trie.checkWord(string) && !this.allWords.includes(string)) {\r\n                this.allWords.push(string);\r\n                this.paths.push(pathCopy);\r\n            }\r\n        }\r\n        const adjacent = this.getAdjacentTiles(location).filter(loc => {\r\n            const locationString = `${loc[0]}${loc[1]}`;\r\n            return !usedCopy.has(locationString);\r\n        });\r\n\r\n        adjacent.forEach(tile => {\r\n            const newString = string + this.currentBoard[tile[0]][tile[1]]\r\n            if(trie.isValidPrefix(newString)) {\r\n                this.findWords(newString, tile, pathCopy, usedCopy);\r\n            }\r\n        });\r\n    },\r\n\r\n    getAdjacentTiles (location) {\r\n        const directions = [\r\n            [-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]\r\n        ];\r\n        return directions.map(dir => {\r\n            const x = dir[0] + location[0];\r\n            const y = dir[1] + location[1];\r\n            return [x, y];\r\n        }).filter(coord => {\r\n            return coord[0] >= 0 && coord[0] < 4 && coord[1] >= 0 && coord[1] < 4;\r\n        });\r\n    },\r\n\r\n    checkUsed (adjacent, used) {\r\n        for (let i = 0; i < used.length; i++) {\r\n            let matches = 0;\r\n            for (let j = 0; j < adjacent.length; j++) {\r\n                if(adjacent[j] === used[i][j]) {\r\n                    matches++;\r\n                }\r\n            }\r\n            if(matches > 1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    getWords() {\r\n        return this.allWords;\r\n    },\r\n\r\n    getPaths() {\r\n        return this.paths;\r\n    },\r\n\r\n    clear() {\r\n        this.paths = [];\r\n        this.allWords = [];\r\n    }\r\n}\r\n\r\nexport default solver;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport wordFile from './english.txt';\n\nimport Board from './Components/Board/Board';\nimport Guess from './Components/Guess/Guess';\nimport AllWords from './Components/AllWords/AllWords';\nimport Timer from './Components/Timer/Timer';\nimport trie from './Components/Util/Trie';\nimport solver from './Components/Util/Solver';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            diceResults: [\n                Array(4).fill(\"\"),\n                Array(4).fill(\"\"),\n                Array(4).fill(\"\"),\n                Array(4).fill(\"\"),\n            ],\n            selected: [\n                Array(4).fill(false),\n                Array(4).fill(false),\n                Array(4).fill(false),\n                Array(4).fill(false),\n            ],\n            paths: [],\n            word: '',\n            wordStart: false,\n            guessedWords: new Set(),\n            allWords: [],\n            lastTile: [],\n            usedTiles: new Set(),\n            score: 0,\n            showWords: false,\n            gameHasStarted: false\n        };\n        this.handlePointerUp = this.handlePointerUp.bind(this);\n        this.showPath = this.showPath.bind(this);\n    }\n\n  componentDidMount() {\n      fetch(wordFile)\n          .then(response => {\n              return response.text()\n          })\n          .then(text => {\n              if(text.length >= 3){\n                  text.split('\\n').forEach(word => {\n                      trie.addWord(word.toUpperCase());\n                  });\n              }\n          });\n  }\n\n  dice = [\n      ['A', 'E', 'A', 'N', 'E', 'G'],\n      ['A', 'H', 'S', 'P', 'C', 'O'],\n      ['A', 'S', 'P', 'F', 'F', 'K'],\n      ['O', 'B', 'J', 'O', 'A', 'B'],\n      ['I', 'O', 'T', 'M', 'U', 'C'],\n      ['R', 'Y', 'V', 'D', 'E', 'L'],\n      ['L', 'R', 'E', 'I', 'X', 'D'],\n      ['E', 'I', 'U', 'N', 'E', 'S'],\n      ['W', 'N', 'G', 'E', 'E', 'H'],\n      ['L', 'N', 'H', 'N', 'R', 'Z'],\n      ['T', 'S', 'T', 'I', 'Y', 'D'],\n      ['O', 'W', 'T', 'O', 'A', 'T'],\n      ['E', 'R', 'T', 'T', 'Y', 'L'],\n      ['T', 'O', 'E', 'S', 'S', 'I'],\n      ['T', 'E', 'R', 'W', 'H', 'V'],\n      ['N', 'U', 'I', 'H', 'M', 'QU']\n  ];\n\n  rollDice = () => {\n    const diceRolls = this.state.diceResults.slice();\n    let diceLeft = this.dice.slice();\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            let die = Math.floor(Math.random() * diceLeft.length);\n            const ind = Math.floor(Math.random() * 6);\n            diceRolls[i][j] = diceLeft[die][ind];\n            diceLeft.splice(die, 1);\n        }\n    }\n    this.setState({diceResults: diceRolls});\n  }\n\n  isAdjacent(x, y) {\n      const adjacent = solver.getAdjacentTiles(this.state.lastTile);\n      return adjacent.some(loc => loc[0] === x && loc[1] === y);\n  }\n\n  scoreWord = (word) => {\n      switch (word.length) {\n          case 3:\n          case 4:\n              return 1;\n          case 5:\n              return 2;\n          case 6:\n              return 3;\n          case 7:\n              return 5;\n          default:\n              return 11;\n      }\n  }\n\n  endGame = () => {\n      this.setState(() => {\n          return {gameHasStarted: false};\n      });\n  }\n\n  clearSelected = () => {\n      const selected = [\n          Array(4).fill(false),\n          Array(4).fill(false),\n          Array(4).fill(false),\n          Array(4).fill(false),\n      ];\n      this.setState(() => {\n          return {selected: selected};\n      });\n  }\n\n  handleStart = async () => {\n      await this.clearSelected();\n      solver.clear();\n      await this.rollDice();\n      await solver.solveBoard(this.state.diceResults);\n      const words = solver.getWords();\n      const paths = solver.getPaths();\n      this.setState({allWords: words, guessedWords: new Set(), paths: paths, score: 0, showWords: false, gameHasStarted: true});\n  }\n\n  handlePointerDown = (x, y, isMouseDown) => {\n      if (this.state.gameHasStarted){\n          if (!this.state.selected[x][y]) {\n              this.setState((prevState) => {\n                  const selected = prevState.selected;\n                  selected[x][y] = true;\n                  return {\n                      wordStart: isMouseDown,\n                      lastTile: [x, y],\n                      selected: selected,\n                      word: prevState.diceResults[x][y]\n                  }\n              });\n          }\n      }\n  }\n\n\n  handlePointerUp() {\n      if(this.state.wordStart && this.state.gameHasStarted){\n          const selected = [\n              Array(4).fill(false),\n              Array(4).fill(false),\n              Array(4).fill(false),\n              Array(4).fill(false),\n          ];\n          const usedTiles = new Set();\n          if (this.state.word.length >= 3 && !this.state.guessedWords.has(this.state.word)){\n              if (trie.checkWord(this.state.word)) {\n                  const points = this.scoreWord(this.state.word);\n                  const guesses = new Set(this.state.guessedWords);\n                  guesses.add(this.state.word);\n                  this.setState((prevState) => {\n                      const newScore = prevState.score + points;\n                      return {word: '', lastTile: [], guessedWords: guesses, selected: selected, wordStart: false, usedTiles: usedTiles, score: newScore};\n                  });\n              } else {\n                  this.setState({word: '', lastTile: [], selected: selected, wordStart: false, usedTiles: usedTiles});\n              }\n          } else {\n              this.setState({word: '', lastTile: [], selected: selected, wordStart: false, usedTiles: usedTiles});\n          }\n      }\n  }\n\n  handlePointerEnter = (x, y, letter) => {\n      if (this.state.wordStart && this.state.gameHasStarted){\n          if(this.isAdjacent(x, y)){\n              if (!this.state.selected[x][y] && !this.state.usedTiles.has(`${x.toString()}${y.toString()}`)) {\n                  this.setState((prevState) => {\n                      const selected = prevState.selected;\n                      const usedTiles = new Set(prevState.usedTiles);\n                      usedTiles.add(`${x.toString}${y.toString()}`);\n                      selected[x][y] = true;\n                      return {\n                          word: prevState.word + letter,\n                          usedTiles: usedTiles,\n                          lastTile: [x, y],\n                          selected: selected\n                      };\n                  });\n              }\n          }\n      }\n  }\n\n  showPath = async (index) => {\n      await this.clearSelected();\n      const newSelected = this.state.selected.slice();\n      const paths = this.state.paths[index];\n      paths.forEach((tile, index) => {\n          setTimeout(() => {\n              newSelected[tile[0]][tile[1]] = true;\n              this.setState({selected: newSelected})\n          }, (index + 1) * 300);\n      });\n\n  }\n\n  showResults = () => {\n      this.setState({gameHasStarted: false, showWords: true});\n  }\n\n\n  render () {\n      let controlArea = this.state.gameHasStarted ?\n          <Timer endGame={() => this.endGame} showResults={this.showResults} /> :\n          <button\n              className={\"game-button\"}\n              onClick={() => this.handleStart()}>START</button>;\n\n      return (\n        <div className={\"app\"}\n             onMouseUp={this.handlePointerUp}>\n            <div className={\"game-area\"}>\n                <Guess string={this.state.word}/>\n                <Board\n                    dice={this.state.diceResults}\n                    selected={this.state.selected}\n                    handlePointerDown={this.handlePointerDown}\n                    handlePointerEnter={this.handlePointerEnter}\n                    isMouseDown={this.state.wordStart}\n                />\n                <div className={\"button-div\"}>\n                    {controlArea}\n                </div>\n                <div className={\"stats-panel\"}>\n                    <h2>Possible Words: {this.state.allWords.length}</h2>\n                    <h2>Words Found: {this.state.guessedWords.size}</h2>\n                    <h2>Score: {this.state.score}</h2>\n                </div>\n                <hr/>\n            </div>\n\n            <div className={\"word-area\"}>\n                <AllWords words={this.state.allWords}\n                          found={this.state.guessedWords}\n                          show={this.state.showWords}\n                          handleClick={this.showPath}\n                />\n            </div>\n        </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}